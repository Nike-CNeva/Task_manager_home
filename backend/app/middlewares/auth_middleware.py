from datetime import datetime, timedelta
from typing import Dict, Optional
from fastapi.responses import RedirectResponse
from jose import jwt, JWTError
from starlette.middleware.base import BaseHTTPMiddleware
from fastapi import APIRouter, Form, Request, HTTPException, Response, status, Depends
from passlib.context import CryptContext
from backend.app.core.dependencies import get_db
from backend.app.core.settings import settings
from fastapi.security import OAuth2PasswordBearer
from sqlalchemy.orm import Session

router = APIRouter()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

# –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –≥–¥–µ –≤–∞–º –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Ç–æ–∫–µ–Ω
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")

class AuthMiddleware(BaseHTTPMiddleware):
    """
    Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ JWT.
    """
    async def dispatch(self, request: Request, call_next):
        access_token = request.headers.get("Authorization")
        token_part = None
        
        if access_token:
            if access_token.startswith("Bearer "):
                token_part = access_token.split(" ", 1)[1]
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞, –æ–∂–∏–¥–∞–µ—Ç—Å—è 'Bearer <token>'")
                request.state.user_id = None
                return await call_next(request)
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Ç—å
            if request.url.path in ["/", "/login", "/docs", "/redoc", "/openapi.json"]:
                return await call_next(request)
            print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
            request.state.user_id = None
            return Response("Unauthorized", status_code=401)

        try:
            print(f"üîê –ü–æ–ª—É—á–µ–Ω access_token: {access_token}")
            print(f"üß© Token part: {token_part}")
            payload = decode_access_token(token_part)  # –§—É–Ω–∫—Ü–∏—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
            print(f"üì¶ –†–∞—Å–ø–∞–∫–æ–≤–∞–Ω–Ω—ã–π payload: {payload}")
            if payload:
                request.state.user_id = payload.get("user_id")
            else:
                print("‚ùå Payload –ø—É—Å—Ç–æ–π, –≤–æ–∑–º–æ–∂–Ω–æ, decode_access_token() –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª")
                request.state.user_id = None
        except JWTError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ JWT: {e}")
            request.state.user_id = None

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç user_id, –∏ –ø—É—Ç—å –Ω–µ /login, —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
        if request.state.user_id is None and request.url.path not in ["/", "/login"]:
            response = Response("Unauthorized", status_code=401)  # –ú–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–µ–¥–∏—Ä–µ–∫—Ç –∏–ª–∏ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            return response  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º Response –±–µ–∑ `await`

        print(f"üîç Middleware –ø–æ–ª—É—á–∏–ª –∑–∞–ø—Ä–æ—Å: {request.url}")

        try:
            response = await call_next(request)  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å –¥–∞–ª—å—à–µ
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            response = Response("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", status_code=500)

        print(f"‚úÖ Middleware –ø—Ä–æ–ø—É—Å—Ç–∏–ª –∑–∞–ø—Ä–æ—Å: {request.url}")

        return response

# ================================
# –•—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
# ================================
async def verify_password(plain_password: str, hashed_password: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è –≤–≤–µ–¥–µ–Ω–Ω–æ–º—É."""
    return pwd_context.verify(plain_password, hashed_password)

async def get_password_hash(password: str) -> str:
    """–•—ç—à–∏—Ä—É–µ—Ç –ø–∞—Ä–æ–ª—å –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –ë–î."""
    return pwd_context.hash(password)

# ================================
# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ JWT —Ç–æ–∫–µ–Ω–æ–≤
# ================================
def create_access_token(data: Dict, expires_delta: Optional[timedelta] = None) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç JWT-—Ç–æ–∫–µ–Ω —Å –∑–∞–¥–∞–Ω–Ω—ã–º —Å—Ä–æ–∫–æ–º –¥–µ–π—Å—Ç–≤–∏—è.
    :param data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ç–æ–∫–µ–Ω
    :param expires_delta: –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Ç–æ–∫–µ–Ω–∞
    :return: –ó–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π JWT-—Ç–æ–∫–µ–Ω
    """
    to_encode = data.copy()
    expire = datetime.utcnow() + (timedelta(minutes=settings.ACCESS_TOKEN_EXPIRE_MINUTES))
    to_encode.update({"exp": expire})
    token = jwt.encode(to_encode, settings.SECRET_KEY, algorithm=settings.ALGORITHM)
    
    # –í—ã–≤–æ–¥ —Ç–æ–∫–µ–Ω–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
    
    return token


def decode_access_token(token: str):
    """
    –î–µ–∫–æ–¥–∏—Ä—É–µ—Ç JWT-—Ç–æ–∫–µ–Ω –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ–≥–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å.
    """
    try:
        payload = jwt.decode(token, settings.SECRET_KEY, algorithms=[settings.ALGORITHM])
        return payload
    except JWTError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∏–∑ cookies
def get_token_from_cookie(request: Request):
    token = request.cookies.get("access_token")  # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∫—É–∫–∏
    if not token:
        raise HTTPException(status_code=401, detail="Not authenticated")
    return token

@router.post("/token")
async def login_for_access_token(response: Response, username: str = Form(...), password: str = Form(...), db: Session = Depends(get_db)):
    from services.user_service import get_user_by_username
    user = get_user_by_username(db, username)
    if not user or not verify_password(password, user.password):
        raise HTTPException(status_code=401, detail="Incorrect username or password")
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ —Å –ø–æ–º–æ—â—å—é create_access_token
    payload = {"user_id": user.id}
    token = create_access_token(payload, expires_delta=timedelta(minutes=settings.ACCESS_TOKEN_EXPIRE_MINUTES))
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –≤ –∫—É–∫–∏
    response.set_cookie(key="access_token", value=token, httponly=True, max_age=settings.ACCESS_TOKEN_EXPIRE_MINUTES*60)
    return {"access_token": token, "token_type": "bearer"}

@router.get("/validate_token")
async def validate_token(token: str = Depends(oauth2_scheme)):
    payload = decode_access_token(token)
    if payload:
        return {"valid": True, "user_id": payload.get("user_id"), "username": payload.get("sub")}
    else:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid or expired token",
            headers={"WWW-Authenticate": "Bearer"},
        )