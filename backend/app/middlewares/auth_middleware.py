from datetime import datetime, timedelta, timezone
import logging
from typing import Any, Awaitable, Callable, Dict, Optional
from jose import ExpiredSignatureError, jwt, JWTError
from starlette.middleware.base import BaseHTTPMiddleware
from fastapi import APIRouter, Request, Response
from passlib.context import CryptContext
from backend.app.core.settings import settings


router = APIRouter()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")


logger = logging.getLogger("auth_middleware")

PUBLIC_PATHS = {"/", "/login", "/docs", "/redoc", "/openapi.json"}

class AuthMiddleware(BaseHTTPMiddleware):
    async def dispatch(self, request: Request, call_next: Callable[[Request], Awaitable[Response]]) -> Response:
        path = request.url.path

        # –ï—Å–ª–∏ –º–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å /api ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        if not path.startswith("/api"):
            return await call_next(request)

        # –î–∞–ª–µ–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—É–±–ª–∏—á–Ω—ã–µ –ø—É—Ç–∏ –≤ /api, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Ç—Ä–µ–±—É—é—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        if path in PUBLIC_PATHS:
            return await call_next(request)
        
        auth_header = request.headers.get("Authorization")
        token_part = None

        if not auth_header:
            logger.warning("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
            request.state.user_id = None
            return Response("Unauthorized", status_code=401)

        if not auth_header.startswith("Bearer "):
            logger.warning("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞, –æ–∂–∏–¥–∞–µ—Ç—Å—è 'Bearer <token>'")
            request.state.user_id = None
            return await call_next(request)

        token_part = auth_header[len("Bearer "):]
        logger.debug(f"üîê –ü–æ–ª—É—á–µ–Ω auth_token: {auth_header}")
        logger.debug(f"üß© Token part: {token_part}")

        try:
            payload = decode_auth_token(token_part)
            logger.debug(f"üì¶ –†–∞—Å–ø–∞–∫–æ–≤–∞–Ω–Ω—ã–π payload: {payload}")
            if payload:
                request.state.user_id = payload.get("user_id")
                # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏ —Ç–æ–∫–µ–Ω–∞
                exp_timestamp = payload.get("exp")
                if exp_timestamp:
                    now = datetime.now(timezone.utc).timestamp()
                    remaining = exp_timestamp - now
                    if remaining > 0:
                        logger.info(f"‚è≥ –û—Å—Ç–∞—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏ –∂–∏–∑–Ω–∏ —Ç–æ–∫–µ–Ω–∞: {remaining:.2f} —Å–µ–∫—É–Ω–¥")
                    else:
                        logger.warning("‚ùå –¢–æ–∫–µ–Ω –ø—Ä–æ—Å—Ä–æ—á–µ–Ω!")
                else:
                    logger.warning("‚ö†Ô∏è –í payload –Ω–µ—Ç –ø–æ–ª—è 'exp'")

            else:
                logger.warning("‚ùå Payload –ø—É—Å—Ç–æ–π")
                request.state.user_id = None
        except JWTError as e:
            logger.warning(f"‚ùå –û—à–∏–±–∫–∞ JWT: {e}")
            request.state.user_id = None

        if request.state.user_id is None and request.url.path not in {"/", "/login"}:
            return Response("Unauthorized", status_code=401)

        logger.info(f"üîç Middleware –ø–æ–ª—É—á–∏–ª –∑–∞–ø—Ä–æ—Å: {request.url}")

        try:
            response = await call_next(request)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            response = Response("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", status_code=500)

        logger.info(f"‚úÖ Middleware –ø—Ä–æ–ø—É—Å—Ç–∏–ª –∑–∞–ø—Ä–æ—Å: {request.url}")

        return response

# ================================
# –•—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
# ================================
async def verify_password(plain_password: str, hashed_password: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è –≤–≤–µ–¥–µ–Ω–Ω–æ–º—É."""
    return pwd_context.verify(plain_password, hashed_password)

async def get_password_hash(password: str) -> str:
    """–•—ç—à–∏—Ä—É–µ—Ç –ø–∞—Ä–æ–ª—å –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –ë–î."""
    return pwd_context.hash(password)

# ================================
# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ JWT —Ç–æ–∫–µ–Ω–æ–≤
# ================================
def create_auth_token(data: Dict[str, Any], expires_delta: Optional[timedelta] = None) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç JWT-—Ç–æ–∫–µ–Ω —Å –∑–∞–¥–∞–Ω–Ω—ã–º —Å—Ä–æ–∫–æ–º –¥–µ–π—Å—Ç–≤–∏—è.
    :param data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ç–æ–∫–µ–Ω
    :param expires_delta: –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Ç–æ–∫–µ–Ω–∞
    :return: –ó–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π JWT-—Ç–æ–∫–µ–Ω
    """
    to_encode = data.copy()
    if expires_delta:
        expire = datetime.now(timezone.utc) + expires_delta
    else:
        expire = datetime.now(timezone.utc) + timedelta(minutes=settings.ACCESS_TOKEN_EXPIRE_MINUTES)
    to_encode.update({"exp": expire})
    token = jwt.encode(to_encode, settings.SECRET_KEY, algorithm=settings.ALGORITHM)
        
    return token


def decode_auth_token(token: str):
    try:
        payload = jwt.decode(token, settings.SECRET_KEY, algorithms=[settings.ALGORITHM])
        return payload
    except ExpiredSignatureError:
        print("‚ùå –¢–æ–∫–µ–Ω –ø—Ä–æ—Å—Ä–æ—á–µ–Ω")
        return None
    except JWTError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
        return None

