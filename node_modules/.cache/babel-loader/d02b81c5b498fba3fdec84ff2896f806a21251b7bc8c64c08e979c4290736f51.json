{"ast":null,"code":"// store.js\nimport { createStore } from 'vuex';\nexport default createStore({\n  state: {\n    // Храним токен в state\n    token: localStorage.getItem('access_token') || '' // Попробуем получить токен из localStorage\n  },\n  mutations: {\n    // Мутация для установки токена в state и localStorage\n    setToken(state, token) {\n      state.token = token;\n      localStorage.setItem('access_token', token); // Сохраняем токен в localStorage\n    },\n    // Мутация для удаления токена\n    logout(state) {\n      state.token = '';\n      localStorage.removeItem('access_token'); // Удаляем токен из localStorage\n    }\n  },\n  actions: {\n    // Действие для логина, которое будет вызываться из компонентов\n    login({\n      commit\n    }, token) {\n      commit('setToken', token); // Устанавливаем токен в state и localStorage\n    },\n    // Действие для логаута, которое будет вызываться из компонентов\n    logout({\n      commit\n    }) {\n      commit('logout'); // Удаляем токен\n    }\n  },\n  getters: {\n    // Геттер для получения токена из state\n    getToken(state) {\n      return state.token;\n    },\n    // Геттер для проверки, авторизован ли пользователь\n    isAuthenticated(state) {\n      return !!state.token; // Если токен есть, то считаем пользователя авторизованным\n    }\n  }\n});","map":{"version":3,"names":["createStore","state","token","localStorage","getItem","mutations","setToken","setItem","logout","removeItem","actions","login","commit","getters","getToken","isAuthenticated"],"sources":["C:/Users/nikec/frontend/src/store.js"],"sourcesContent":["// store.js\r\nimport { createStore } from 'vuex';\r\n\r\nexport default createStore({\r\n  state: {\r\n    // Храним токен в state\r\n    token: localStorage.getItem('access_token') || ''  // Попробуем получить токен из localStorage\r\n  },\r\n  mutations: {\r\n    // Мутация для установки токена в state и localStorage\r\n    setToken(state, token) {\r\n      state.token = token;\r\n      localStorage.setItem('access_token', token);  // Сохраняем токен в localStorage\r\n    },\r\n    // Мутация для удаления токена\r\n    logout(state) {\r\n      state.token = '';\r\n      localStorage.removeItem('access_token');  // Удаляем токен из localStorage\r\n    }\r\n  },\r\n  actions: {\r\n    // Действие для логина, которое будет вызываться из компонентов\r\n    login({ commit }, token) {\r\n      commit('setToken', token);  // Устанавливаем токен в state и localStorage\r\n    },\r\n    // Действие для логаута, которое будет вызываться из компонентов\r\n    logout({ commit }) {\r\n      commit('logout');  // Удаляем токен\r\n    }\r\n  },\r\n  getters: {\r\n    // Геттер для получения токена из state\r\n    getToken(state) {\r\n      return state.token;\r\n    },\r\n    // Геттер для проверки, авторизован ли пользователь\r\n    isAuthenticated(state) {\r\n      return !!state.token;  // Если токен есть, то считаем пользователя авторизованным\r\n    }\r\n  }\r\n});\r\n"],"mappings":"AAAA;AACA,SAASA,WAAW,QAAQ,MAAM;AAElC,eAAeA,WAAW,CAAC;EACzBC,KAAK,EAAE;IACL;IACAC,KAAK,EAAEC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC,IAAI,EAAE,CAAE;EACrD,CAAC;EACDC,SAAS,EAAE;IACT;IACAC,QAAQA,CAACL,KAAK,EAAEC,KAAK,EAAE;MACrBD,KAAK,CAACC,KAAK,GAAGA,KAAK;MACnBC,YAAY,CAACI,OAAO,CAAC,cAAc,EAAEL,KAAK,CAAC,CAAC,CAAE;IAChD,CAAC;IACD;IACAM,MAAMA,CAACP,KAAK,EAAE;MACZA,KAAK,CAACC,KAAK,GAAG,EAAE;MAChBC,YAAY,CAACM,UAAU,CAAC,cAAc,CAAC,CAAC,CAAE;IAC5C;EACF,CAAC;EACDC,OAAO,EAAE;IACP;IACAC,KAAKA,CAAC;MAAEC;IAAO,CAAC,EAAEV,KAAK,EAAE;MACvBU,MAAM,CAAC,UAAU,EAAEV,KAAK,CAAC,CAAC,CAAE;IAC9B,CAAC;IACD;IACAM,MAAMA,CAAC;MAAEI;IAAO,CAAC,EAAE;MACjBA,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAE;IACrB;EACF,CAAC;EACDC,OAAO,EAAE;IACP;IACAC,QAAQA,CAACb,KAAK,EAAE;MACd,OAAOA,KAAK,CAACC,KAAK;IACpB,CAAC;IACD;IACAa,eAAeA,CAACd,KAAK,EAAE;MACrB,OAAO,CAAC,CAACA,KAAK,CAACC,KAAK,CAAC,CAAE;IACzB;EACF;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}