{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, vModelText as _vModelText, withDirectives as _withDirectives, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, vModelSelect as _vModelSelect, createVNode as _createVNode, withModifiers as _withModifiers } from \"vue\";\nconst _hoisted_1 = {\n  class: \"form-row\"\n};\nconst _hoisted_2 = [\"value\"];\nconst _hoisted_3 = [\"value\"];\nconst _hoisted_4 = {\n  class: \"form-row\"\n};\nconst _hoisted_5 = {\n  class: \"form-row\"\n};\nconst _hoisted_6 = [\"value\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_cache[11] || (_cache[11] = _createElementVNode(\"h2\", null, \"Создание заявки\", -1 /* HOISTED */)), _createElementVNode(\"form\", {\n    onSubmit: _withModifiers($setup.submitForm, [\"prevent\"])\n  }, [_createCommentVNode(\" Первая строка: кнопки \"), _createElementVNode(\"div\", {\n    class: \"button-group\"\n  }, [_createElementVNode(\"button\", {\n    type: \"button\",\n    onClick: $setup.addProduct\n  }, \"Добавить изделие\"), _createElementVNode(\"button\", {\n    type: \"button\",\n    onClick: $setup.removeLastProduct\n  }, \"Удалить последнее изделие\")]), _createCommentVNode(\" Вторая строка: Номер заявки, заказчик, менеджер \"), _createElementVNode(\"div\", _hoisted_1, [_withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.form.task_number = $event),\n    type: \"number\",\n    placeholder: \"Номер заявки\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $setup.form.task_number]]), _withDirectives(_createElementVNode(\"select\", {\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $setup.form.customer_id = $event),\n    onChange: $setup.handleCustomerChange\n  }, [_cache[5] || (_cache[5] = _createElementVNode(\"option\", {\n    value: \"\"\n  }, \"Выберите заказчика\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.customers, customer => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: customer.id,\n      value: customer.id\n    }, _toDisplayString(customer.name), 9 /* TEXT, PROPS */, _hoisted_2);\n  }), 128 /* KEYED_FRAGMENT */)), _cache[6] || (_cache[6] = _createElementVNode(\"option\", {\n    value: \"new\"\n  }, \"Добавить нового\", -1 /* HOISTED */))], 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelSelect, $setup.form.customer_id]]), $setup.form.customer_id === 'new' ? _withDirectives((_openBlock(), _createElementBlock(\"input\", {\n    key: 0,\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $setup.newCustomer = $event),\n    placeholder: \"Новый заказчик\"\n  }, null, 512 /* NEED_PATCH */)), [[_vModelText, $setup.newCustomer]]) : _createCommentVNode(\"v-if\", true), _withDirectives(_createElementVNode(\"select\", {\n    \"onUpdate:modelValue\": _cache[3] || (_cache[3] = $event => $setup.form.manager = $event)\n  }, [_cache[7] || (_cache[7] = _createElementVNode(\"option\", {\n    value: \"\"\n  }, \"Выберите менеджера\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.managers, manager => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: manager.name,\n      value: manager.name\n    }, _toDisplayString(manager.value), 9 /* TEXT, PROPS */, _hoisted_3);\n  }), 128 /* KEYED_FRAGMENT */))], 512 /* NEED_PATCH */), [[_vModelSelect, $setup.form.manager]])]), _createCommentVNode(\" Изделия \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.products, (product, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index,\n      class: \"product-row\"\n    }, [_createCommentVNode(\" Здесь будут дочерние компоненты \"), _createVNode($setup[\"ProductForm\"], {\n      product: product,\n      index: index,\n      onUpdate: $event => $setup.updateProduct(index, $event),\n      onRemove: $event => $setup.removeProduct(index)\n    }, null, 8 /* PROPS */, [\"product\", \"index\", \"onUpdate\", \"onRemove\"])]);\n  }), 128 /* KEYED_FRAGMENT */)), _createCommentVNode(\" Загрузка файлов \"), _createElementVNode(\"div\", _hoisted_4, [_cache[8] || (_cache[8] = _createElementVNode(\"label\", {\n    for: \"file-upload\"\n  }, \"Загрузить файлы:\", -1 /* HOISTED */)), _createElementVNode(\"input\", {\n    id: \"file-upload\",\n    type: \"file\",\n    multiple: \"\",\n    onChange: $setup.handleFileUpload\n  }, null, 32 /* NEED_HYDRATION */)]), _createCommentVNode(\" Статус \"), _createElementVNode(\"div\", _hoisted_5, [_withDirectives(_createElementVNode(\"select\", {\n    \"onUpdate:modelValue\": _cache[4] || (_cache[4] = $event => $setup.form.status = $event)\n  }, [_cache[9] || (_cache[9] = _createElementVNode(\"option\", {\n    value: \"\"\n  }, \"Выберите статус\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.statuses, status => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      value: status.name\n    }, _toDisplayString(status.value), 9 /* TEXT, PROPS */, _hoisted_6);\n  }), 256 /* UNKEYED_FRAGMENT */))], 512 /* NEED_PATCH */), [[_vModelSelect, $setup.form.status]])]), _createCommentVNode(\" Кнопка отправки \"), _cache[10] || (_cache[10] = _createElementVNode(\"button\", {\n    type: \"submit\"\n  }, \"Отправить заявку\", -1 /* HOISTED */))], 32 /* NEED_HYDRATION */)]);\n}","map":{"version":3,"names":["class","_createElementBlock","_createElementVNode","onSubmit","_withModifiers","$setup","submitForm","_createCommentVNode","type","onClick","addProduct","removeLastProduct","_hoisted_1","_cache","$event","form","task_number","placeholder","customer_id","onChange","handleCustomerChange","value","_Fragment","_renderList","customers","customer","key","id","name","_hoisted_2","newCustomer","manager","managers","_hoisted_3","products","product","index","_createVNode","onUpdate","updateProduct","onRemove","removeProduct","_hoisted_4","for","multiple","handleFileUpload","_hoisted_5","status","statuses","_hoisted_6"],"sources":["C:\\Users\\nikec\\frontend\\src\\components\\CreateBid.vue"],"sourcesContent":["<template>\r\n    <div>\r\n      <h2>Создание заявки</h2>\r\n      <form @submit.prevent=\"submitForm\">\r\n        <!-- Первая строка: кнопки -->\r\n        <div class=\"button-group\">\r\n          <button type=\"button\" @click=\"addProduct\">Добавить изделие</button>\r\n          <button type=\"button\" @click=\"removeLastProduct\">Удалить последнее изделие</button>\r\n        </div>\r\n  \r\n        <!-- Вторая строка: Номер заявки, заказчик, менеджер -->\r\n        <div class=\"form-row\">\r\n          <input v-model=\"form.task_number\" type=\"number\" placeholder=\"Номер заявки\" />\r\n  \r\n          <select v-model=\"form.customer_id\" @change=\"handleCustomerChange\">\r\n            <option value=\"\">Выберите заказчика</option>\r\n            <option v-for=\"customer in customers\" :key=\"customer.id\" :value=\"customer.id\">{{ customer.name }}</option>\r\n            <option value=\"new\">Добавить нового</option>\r\n          </select>\r\n  \r\n          <input v-if=\"form.customer_id === 'new'\" v-model=\"newCustomer\" placeholder=\"Новый заказчик\" />\r\n  \r\n          <select v-model=\"form.manager\">\r\n            <option value=\"\">Выберите менеджера</option>\r\n            <option v-for=\"manager in managers\" :key=\"manager.name\" :value=\"manager.name\">{{ manager.value }}</option>\r\n          </select>\r\n        </div>\r\n  \r\n        <!-- Изделия -->\r\n        <div v-for=\"(product, index) in products\" :key=\"index\" class=\"product-row\">\r\n          <!-- Здесь будут дочерние компоненты -->\r\n          <ProductForm\r\n            :product=\"product\"\r\n            :index=\"index\"\r\n            @update=\"updateProduct(index, $event)\"\r\n            @remove=\"removeProduct(index)\"\r\n          />\r\n        </div>\r\n  \r\n        <!-- Загрузка файлов -->\r\n        <div class=\"form-row\">\r\n          <label for=\"file-upload\">Загрузить файлы:</label>\r\n          <input id=\"file-upload\" type=\"file\" multiple @change=\"handleFileUpload\" />\r\n        </div>\r\n  \r\n        <!-- Статус -->\r\n        <div class=\"form-row\">\r\n          <select v-model=\"form.status\">\r\n            <option value=\"\">Выберите статус</option>\r\n            <option v-for=\"status in statuses\" :value=\"status.name\">{{ status.value }}</option>\r\n          </select>\r\n        </div>\r\n  \r\n        <!-- Кнопка отправки -->\r\n        <button type=\"submit\">Отправить заявку</button>\r\n      </form>\r\n    </div>\r\n  </template>\r\n  \r\n  <script setup>\r\n  import { ref, reactive, onMounted } from 'vue';\r\n  import ProductForm from './ProductForm.vue'; // Компонент для одного изделия\r\n  \r\n  const form = reactive({\r\n    task_number: '',\r\n    customer_id: '',\r\n    manager: '',\r\n    status: '',\r\n  });\r\n  \r\n  const newCustomer = ref('');\r\n  const files = ref([]);\r\n  const customers = ref([]);\r\n  const managers = ref([]);\r\n  const statuses = ref([]);\r\n  const products = ref([]);\r\n  \r\n  onMounted(async () => {\r\n    customers.value = await (await fetch('/customers/')).json();\r\n    managers.value = [...JSON.parse('{{ managers | tojson | safe }}')]; // или передать через props\r\n    statuses.value = [...JSON.parse('{{ status | tojson | safe }}')];   // то же самое\r\n  });\r\n  \r\n  function handleCustomerChange() {\r\n    if (form.customer_id !== 'new') newCustomer.value = '';\r\n  }\r\n  \r\n  function addProduct() {\r\n    products.value.push({});\r\n  }\r\n  \r\n  function removeLastProduct() {\r\n    products.value.pop();\r\n  }\r\n  \r\n  function updateProduct(index, data) {\r\n    products.value[index] = data;\r\n  }\r\n  \r\n  function removeProduct(index) {\r\n    products.value.splice(index, 1);\r\n  }\r\n  \r\n  function handleFileUpload(event) {\r\n    files.value = Array.from(event.target.files);\r\n  }\r\n  \r\n  async function submitForm() {\r\n    const payload = {\r\n      ...form,\r\n      new_customer: form.customer_id === 'new' ? newCustomer.value : undefined,\r\n      products: products.value,\r\n      files: files.value.map(f => f.name),\r\n    };\r\n  \r\n    const formData = new FormData();\r\n    formData.append('bid_data', JSON.stringify(payload));\r\n    files.value.forEach(file => formData.append('files', file));\r\n  \r\n    const response = await fetch('/bids/create/', {\r\n      method: 'POST',\r\n      body: formData,\r\n    });\r\n  \r\n    const result = await response.json();\r\n    if (response.ok) {\r\n      alert('Заявка успешно создана!');\r\n    } else {\r\n      alert('Ошибка: ' + result.message);\r\n    }\r\n  }\r\n  </script>\r\n  \r\n  <style scoped>\r\n  /* Можно скопировать стили из HTML или написать на Tailwind / Bootstrap */\r\n  </style>\r\n  "],"mappings":";;EAWaA,KAAK,EAAC;AAAU;mBAX7B;mBAAA;;EAwCaA,KAAK,EAAC;AAAU;;EAMhBA,KAAK,EAAC;AAAU;mBA9C7B;;uBACIC,mBAAA,CAuDM,c,4BAtDJC,mBAAA,CAAwB,YAApB,iBAAe,sBACnBA,mBAAA,CAoDO;IApDAC,QAAM,EAHnBC,cAAA,CAG6BC,MAAA,CAAAC,UAAU;MAC/BC,mBAAA,2BAA8B,EAC9BL,mBAAA,CAGM;IAHDF,KAAK,EAAC;EAAc,IACvBE,mBAAA,CAAmE;IAA3DM,IAAI,EAAC,QAAQ;IAAEC,OAAK,EAAEJ,MAAA,CAAAK;KAAY,kBAAgB,GAC1DR,mBAAA,CAAmF;IAA3EM,IAAI,EAAC,QAAQ;IAAEC,OAAK,EAAEJ,MAAA,CAAAM;KAAmB,2BAAyB,E,GAG5EJ,mBAAA,qDAAwD,EACxDL,mBAAA,CAeM,OAfNU,UAeM,G,gBAdJV,mBAAA,CAA6E;IAZvF,uBAAAW,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAY0BT,MAAA,CAAAU,IAAI,CAACC,WAAW,GAAAF,MAAA;IAAEN,IAAI,EAAC,QAAQ;IAACS,WAAW,EAAC;iDAA5CZ,MAAA,CAAAU,IAAI,CAACC,WAAW,E,mBAEhCd,mBAAA,CAIS;IAlBnB,uBAAAW,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAc2BT,MAAA,CAAAU,IAAI,CAACG,WAAW,GAAAJ,MAAA;IAAGK,QAAM,EAAEd,MAAA,CAAAe;gCAC1ClB,mBAAA,CAA4C;IAApCmB,KAAK,EAAC;EAAE,GAAC,oBAAkB,uB,kBACnCpB,mBAAA,CAA0GqB,SAAA,QAhBtHC,WAAA,CAgBuClB,MAAA,CAAAmB,SAAS,EAArBC,QAAQ;yBAAvBxB,mBAAA,CAA0G;MAAnEyB,GAAG,EAAED,QAAQ,CAACE,EAAE;MAAGN,KAAK,EAAEI,QAAQ,CAACE;wBAAOF,QAAQ,CAACG,IAAI,wBAhB1GC,UAAA;4DAiBY3B,mBAAA,CAA4C;IAApCmB,KAAK,EAAC;EAAK,GAAC,iBAAe,qB,0DAHpBhB,MAAA,CAAAU,IAAI,CAACG,WAAW,E,GAMpBb,MAAA,CAAAU,IAAI,CAACG,WAAW,a,+BAA7BjB,mBAAA,CAA8F;IApBxGyB,GAAA;IAAA,uBAAAb,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAoB4DT,MAAA,CAAAyB,WAAW,GAAAhB,MAAA;IAAEG,WAAW,EAAC;kDAAzBZ,MAAA,CAAAyB,WAAW,E,IApBvEvB,mBAAA,gB,gBAsBUL,mBAAA,CAGS;IAzBnB,uBAAAW,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAsB2BT,MAAA,CAAAU,IAAI,CAACgB,OAAO,GAAAjB,MAAA;gCAC3BZ,mBAAA,CAA4C;IAApCmB,KAAK,EAAC;EAAE,GAAC,oBAAkB,uB,kBACnCpB,mBAAA,CAA0GqB,SAAA,QAxBtHC,WAAA,CAwBsClB,MAAA,CAAA2B,QAAQ,EAAnBD,OAAO;yBAAtB9B,mBAAA,CAA0G;MAArEyB,GAAG,EAAEK,OAAO,CAACH,IAAI;MAAGP,KAAK,EAAEU,OAAO,CAACH;wBAASG,OAAO,CAACV,KAAK,wBAxB1GY,UAAA;2EAsB2B5B,MAAA,CAAAU,IAAI,CAACgB,OAAO,E,KAM/BxB,mBAAA,aAAgB,G,kBAChBN,mBAAA,CAQMqB,SAAA,QArCdC,WAAA,CA6BwClB,MAAA,CAAA6B,QAAQ,EA7BhD,CA6BqBC,OAAO,EAAEC,KAAK;yBAA3BnC,mBAAA,CAQM;MARqCyB,GAAG,EAAEU,KAAK;MAAEpC,KAAK,EAAC;QAC3DO,mBAAA,qCAAwC,EACxC8B,YAAA,CAKEhC,MAAA;MAJC8B,OAAO,EAAEA,OAAO;MAChBC,KAAK,EAAEA,KAAK;MACZE,QAAM,EAAAxB,MAAA,IAAET,MAAA,CAAAkC,aAAa,CAACH,KAAK,EAAEtB,MAAM;MACnC0B,QAAM,EAAA1B,MAAA,IAAET,MAAA,CAAAoC,aAAa,CAACL,KAAK;;kCAIhC7B,mBAAA,qBAAwB,EACxBL,mBAAA,CAGM,OAHNwC,UAGM,G,0BAFJxC,mBAAA,CAAiD;IAA1CyC,GAAG,EAAC;EAAa,GAAC,kBAAgB,sBACzCzC,mBAAA,CAA0E;IAAnEyB,EAAE,EAAC,aAAa;IAACnB,IAAI,EAAC,MAAM;IAACoC,QAAQ,EAAR,EAAQ;IAAEzB,QAAM,EAAEd,MAAA,CAAAwC;uCAGxDtC,mBAAA,YAAe,EACfL,mBAAA,CAKM,OALN4C,UAKM,G,gBAJJ5C,mBAAA,CAGS;IAlDnB,uBAAAW,MAAA,QAAAA,MAAA,MAAAC,MAAA,IA+C2BT,MAAA,CAAAU,IAAI,CAACgC,MAAM,GAAAjC,MAAA;gCAC1BZ,mBAAA,CAAyC;IAAjCmB,KAAK,EAAC;EAAE,GAAC,iBAAe,uB,kBAChCpB,mBAAA,CAAmFqB,SAAA,QAjD/FC,WAAA,CAiDqClB,MAAA,CAAA2C,QAAQ,EAAlBD,MAAM;yBAArB9C,mBAAA,CAAmF;MAA/CoB,KAAK,EAAE0B,MAAM,CAACnB;wBAASmB,MAAM,CAAC1B,KAAK,wBAjDnF4B,UAAA;6EA+C2B5C,MAAA,CAAAU,IAAI,CAACgC,MAAM,E,KAM9BxC,mBAAA,qBAAwB,E,4BACxBL,mBAAA,CAA+C;IAAvCM,IAAI,EAAC;EAAQ,GAAC,kBAAgB,qB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}