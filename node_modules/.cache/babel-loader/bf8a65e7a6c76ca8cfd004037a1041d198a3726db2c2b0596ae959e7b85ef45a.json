{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport { fetchWithToken } from '@/utils/api'; // Импортируем функцию\n\nexport default {\n  name: \"UserManagement\",\n  data() {\n    return {\n      users: []\n    };\n  },\n  methods: {\n    async fetchUsers() {\n      try {\n        const data = await fetchWithToken(\"/api/admin/users\"); // Используем fetchWithToken\n        this.users = data.users || []; // Присваиваем пустой массив, если нет данных\n      } catch (error) {\n        console.error(\"Ошибка загрузки пользователей:\", error);\n        this.users = []; // Присваиваем пустой массив в случае ошибки\n      }\n    },\n    async confirmDelete(user) {\n      if (confirm(`Удалить пользователя ${user.name}?`)) {\n        try {\n          const response = await fetchWithToken(`/api/admin/users/${user.id}/delete`, {\n            method: \"GET\" // Можно заменить на DELETE, если на бэке реализовано\n          });\n          if (response.ok) {\n            this.users = this.users.filter(u => u.id !== user.id);\n          } else {\n            const data = await response.json();\n            alert(`Ошибка: ${data.detail}`);\n          }\n        } catch (error) {\n          alert(\"Не удалось удалить пользователя\");\n        }\n      }\n    }\n  },\n  mounted() {\n    this.fetchUsers();\n  }\n};","map":{"version":3,"names":["fetchWithToken","name","data","users","methods","fetchUsers","error","console","confirmDelete","user","confirm","response","id","method","ok","filter","u","json","alert","detail","mounted"],"sources":["C:\\task_manager\\src\\components\\UserManagement.vue"],"sourcesContent":["<template>\r\n    <div>\r\n      <h1 class=\"mb-4\">Управление пользователями</h1>\r\n  \r\n      <a href=\"/admin/users/create\" class=\"btn btn-success mb-3\">Создать нового пользователя</a>\r\n  \r\n      <table class=\"table table-striped\" v-if=\"users && users.length > 0\">\r\n        <thead>\r\n          <tr>\r\n            <th>ID</th>\r\n            <th>Имя</th>\r\n            <th>Фамилия</th>\r\n            <th>Логин</th>\r\n            <th>Email</th>\r\n            <th>Телеграм</th>\r\n            <th>Роль</th>\r\n            <th>Цех</th>\r\n            <th>Действия</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr v-for=\"user in users\" :key=\"user.id\">\r\n            <td>{{ user.id }}</td>\r\n            <td>{{ user.name }}</td>\r\n            <td>{{ user.firstname }}</td>\r\n            <td>{{ user.username }}</td>\r\n            <td>{{ user.email }}</td>\r\n            <td>{{ user.telegram }}</td>\r\n            <td>{{ user.user_type }}</td>\r\n            <td>\r\n              <span\r\n                class=\"badge bg-primary me-1\"\r\n                v-for=\"workshop in user.workshops\"\r\n                :key=\"workshop\"\r\n              >\r\n                {{ workshop }}\r\n              </span>\r\n            </td>\r\n            <td>\r\n              <a :href=\"`/admin/users/${user.id}/edit`\" class=\"btn btn-primary btn-sm\">Редактировать</a>\r\n              <button @click=\"confirmDelete(user)\" class=\"btn btn-danger btn-sm\">Удалить</button>\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n  \r\n      <div v-else class=\"text-muted\">Нет пользователей.</div>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import { fetchWithToken } from '@/utils/api';  // Импортируем функцию\r\n\r\n  export default {\r\n    name: \"UserManagement\",\r\n    data() {\r\n      return {\r\n        users: [],\r\n      };\r\n    },\r\n    methods: {\r\n      async fetchUsers() {\r\n        try {\r\n          const data = await fetchWithToken(\"/api/admin/users\");  // Используем fetchWithToken\r\n          this.users = data.users || [];  // Присваиваем пустой массив, если нет данных\r\n        } catch (error) {\r\n          console.error(\"Ошибка загрузки пользователей:\", error);\r\n          this.users = [];  // Присваиваем пустой массив в случае ошибки\r\n        }\r\n      },\r\n      async confirmDelete(user) {\r\n        if (confirm(`Удалить пользователя ${user.name}?`)) {\r\n          try {\r\n            const response = await fetchWithToken(`/api/admin/users/${user.id}/delete`, {\r\n              method: \"GET\",  // Можно заменить на DELETE, если на бэке реализовано\r\n            });\r\n\r\n            if (response.ok) {\r\n              this.users = this.users.filter(u => u.id !== user.id);\r\n            } else {\r\n              const data = await response.json();\r\n              alert(`Ошибка: ${data.detail}`);\r\n            }\r\n          } catch (error) {\r\n            alert(\"Не удалось удалить пользователя\");\r\n          }\r\n        }\r\n      },\r\n    },\r\n    mounted() {\r\n      this.fetchUsers();\r\n    },\r\n  };\r\n</script>\r\n  "],"mappings":";;AAmDE,SAASA,cAAa,QAAS,aAAa,EAAG;;AAE/C,eAAe;EACbC,IAAI,EAAE,gBAAgB;EACtBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,KAAK,EAAE;IACT,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACP,MAAMC,UAAUA,CAAA,EAAG;MACjB,IAAI;QACF,MAAMH,IAAG,GAAI,MAAMF,cAAc,CAAC,kBAAkB,CAAC,EAAG;QACxD,IAAI,CAACG,KAAI,GAAID,IAAI,CAACC,KAAI,IAAK,EAAE,EAAG;MAClC,EAAE,OAAOG,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;QACtD,IAAI,CAACH,KAAI,GAAI,EAAE,EAAG;MACpB;IACF,CAAC;IACD,MAAMK,aAAaA,CAACC,IAAI,EAAE;MACxB,IAAIC,OAAO,CAAC,wBAAwBD,IAAI,CAACR,IAAI,GAAG,CAAC,EAAE;QACjD,IAAI;UACF,MAAMU,QAAO,GAAI,MAAMX,cAAc,CAAC,oBAAoBS,IAAI,CAACG,EAAE,SAAS,EAAE;YAC1EC,MAAM,EAAE,KAAK,CAAG;UAClB,CAAC,CAAC;UAEF,IAAIF,QAAQ,CAACG,EAAE,EAAE;YACf,IAAI,CAACX,KAAI,GAAI,IAAI,CAACA,KAAK,CAACY,MAAM,CAACC,CAAA,IAAKA,CAAC,CAACJ,EAAC,KAAMH,IAAI,CAACG,EAAE,CAAC;UACvD,OAAO;YACL,MAAMV,IAAG,GAAI,MAAMS,QAAQ,CAACM,IAAI,CAAC,CAAC;YAClCC,KAAK,CAAC,WAAWhB,IAAI,CAACiB,MAAM,EAAE,CAAC;UACjC;QACF,EAAE,OAAOb,KAAK,EAAE;UACdY,KAAK,CAAC,iCAAiC,CAAC;QAC1C;MACF;IACF;EACF,CAAC;EACDE,OAAOA,CAAA,EAAG;IACR,IAAI,CAACf,UAAU,CAAC,CAAC;EACnB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}