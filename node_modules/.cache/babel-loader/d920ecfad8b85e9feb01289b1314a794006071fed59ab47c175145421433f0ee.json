{"ast":null,"code":"import { createStore } from 'vuex';\nexport default createStore({\n  state: {\n    // Храним токен в state, если он есть в localStorage\n    token: localStorage.getItem('access_token') || '',\n    user: JSON.parse(localStorage.getItem('user')) || {} // Получаем пользователя из localStorage\n  },\n  mutations: {\n    // Мутация для установки токена в state и localStorage\n    setToken(state, token) {\n      state.token = token;\n      localStorage.setItem('access_token', token); // Сохраняем токен в localStorage\n    },\n    setUser(state, user) {\n      state.user = user;\n      localStorage.setItem('user', JSON.stringify(user)); // Сохраняем пользователя в localStorage\n    },\n    // Мутация для удаления токена и пользователя\n    logout(state) {\n      state.token = '';\n      state.user = {};\n      localStorage.removeItem('access_token'); // Удаляем токен из localStorage\n      localStorage.removeItem('user'); // Удаляем пользователя из localStorage\n    }\n  },\n  actions: {\n    // Действие для логина, которое будет вызываться из компонентов\n    login({\n      commit\n    }, {\n      token,\n      user\n    }) {\n      commit('setToken', token); // Устанавливаем токен в state и localStorage\n      commit('setUser', user); // Устанавливаем пользователя в state и localStorage\n    },\n    // Действие для логаута, которое будет вызываться из компонентов\n    logout({\n      commit\n    }) {\n      commit('logout'); // Удаляем токен и пользователя\n    }\n  },\n  getters: {\n    // Геттер для получения токена из state\n    getToken(state) {\n      return state.token;\n    },\n    // Геттер для получения пользователя из state\n    getUser(state) {\n      return state.user;\n    },\n    // Геттер для проверки, авторизован ли пользователь\n    isAuthenticated(state) {\n      return !!state.token; // Если токен есть, то считаем пользователя авторизованным\n    }\n  }\n});","map":{"version":3,"names":["createStore","state","token","localStorage","getItem","user","JSON","parse","mutations","setToken","setItem","setUser","stringify","logout","removeItem","actions","login","commit","getters","getToken","getUser","isAuthenticated"],"sources":["C:/Users/nikec/frontend/src/store.js"],"sourcesContent":["import { createStore } from 'vuex';\r\n\r\nexport default createStore({\r\n  state: {\r\n    // Храним токен в state, если он есть в localStorage\r\n    token: localStorage.getItem('access_token') || '',  \r\n    user: JSON.parse(localStorage.getItem('user')) || {}  // Получаем пользователя из localStorage\r\n  },\r\n  mutations: {\r\n    // Мутация для установки токена в state и localStorage\r\n    setToken(state, token) {\r\n      state.token = token;\r\n      localStorage.setItem('access_token', token);  // Сохраняем токен в localStorage\r\n    },\r\n    setUser(state, user) {\r\n      state.user = user;\r\n      localStorage.setItem('user', JSON.stringify(user));  // Сохраняем пользователя в localStorage\r\n    },\r\n    // Мутация для удаления токена и пользователя\r\n    logout(state) {\r\n      state.token = '';\r\n      state.user = {};\r\n      localStorage.removeItem('access_token');  // Удаляем токен из localStorage\r\n      localStorage.removeItem('user');  // Удаляем пользователя из localStorage\r\n    }\r\n  },\r\n  actions: {\r\n    // Действие для логина, которое будет вызываться из компонентов\r\n    login({ commit }, { token, user }) {\r\n      commit('setToken', token);  // Устанавливаем токен в state и localStorage\r\n      commit('setUser', user);  // Устанавливаем пользователя в state и localStorage\r\n    },\r\n    // Действие для логаута, которое будет вызываться из компонентов\r\n    logout({ commit }) {\r\n      commit('logout');  // Удаляем токен и пользователя\r\n    }\r\n  },\r\n  getters: {\r\n    // Геттер для получения токена из state\r\n    getToken(state) {\r\n      return state.token;\r\n    },\r\n    // Геттер для получения пользователя из state\r\n    getUser(state) {\r\n      return state.user;\r\n    },\r\n    // Геттер для проверки, авторизован ли пользователь\r\n    isAuthenticated(state) {\r\n      return !!state.token;  // Если токен есть, то считаем пользователя авторизованным\r\n    }\r\n  }\r\n});\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,MAAM;AAElC,eAAeA,WAAW,CAAC;EACzBC,KAAK,EAAE;IACL;IACAC,KAAK,EAAEC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC,IAAI,EAAE;IACjDC,IAAI,EAAEC,IAAI,CAACC,KAAK,CAACJ,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAE;EACxD,CAAC;EACDI,SAAS,EAAE;IACT;IACAC,QAAQA,CAACR,KAAK,EAAEC,KAAK,EAAE;MACrBD,KAAK,CAACC,KAAK,GAAGA,KAAK;MACnBC,YAAY,CAACO,OAAO,CAAC,cAAc,EAAER,KAAK,CAAC,CAAC,CAAE;IAChD,CAAC;IACDS,OAAOA,CAACV,KAAK,EAAEI,IAAI,EAAE;MACnBJ,KAAK,CAACI,IAAI,GAAGA,IAAI;MACjBF,YAAY,CAACO,OAAO,CAAC,MAAM,EAAEJ,IAAI,CAACM,SAAS,CAACP,IAAI,CAAC,CAAC,CAAC,CAAE;IACvD,CAAC;IACD;IACAQ,MAAMA,CAACZ,KAAK,EAAE;MACZA,KAAK,CAACC,KAAK,GAAG,EAAE;MAChBD,KAAK,CAACI,IAAI,GAAG,CAAC,CAAC;MACfF,YAAY,CAACW,UAAU,CAAC,cAAc,CAAC,CAAC,CAAE;MAC1CX,YAAY,CAACW,UAAU,CAAC,MAAM,CAAC,CAAC,CAAE;IACpC;EACF,CAAC;EACDC,OAAO,EAAE;IACP;IACAC,KAAKA,CAAC;MAAEC;IAAO,CAAC,EAAE;MAAEf,KAAK;MAAEG;IAAK,CAAC,EAAE;MACjCY,MAAM,CAAC,UAAU,EAAEf,KAAK,CAAC,CAAC,CAAE;MAC5Be,MAAM,CAAC,SAAS,EAAEZ,IAAI,CAAC,CAAC,CAAE;IAC5B,CAAC;IACD;IACAQ,MAAMA,CAAC;MAAEI;IAAO,CAAC,EAAE;MACjBA,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAE;IACrB;EACF,CAAC;EACDC,OAAO,EAAE;IACP;IACAC,QAAQA,CAAClB,KAAK,EAAE;MACd,OAAOA,KAAK,CAACC,KAAK;IACpB,CAAC;IACD;IACAkB,OAAOA,CAACnB,KAAK,EAAE;MACb,OAAOA,KAAK,CAACI,IAAI;IACnB,CAAC;IACD;IACAgB,eAAeA,CAACpB,KAAK,EAAE;MACrB,OAAO,CAAC,CAACA,KAAK,CAACC,KAAK,CAAC,CAAE;IACzB;EACF;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}