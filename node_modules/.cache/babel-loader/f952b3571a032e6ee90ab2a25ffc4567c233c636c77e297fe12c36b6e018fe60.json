{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport { ref, reactive, onMounted } from 'vue';\nimport ProductForm from './ProductForm.vue'; // Компонент для одного изделия\n\nexport default {\n  __name: 'CreateBid',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const form = reactive({\n      task_number: '',\n      customer_id: '',\n      manager: '',\n      status: ''\n    });\n    const newCustomer = ref('');\n    const files = ref([]);\n    const customers = ref([]);\n    const managers = ref([]);\n    const statuses = ref([]);\n    const products = ref([]);\n    onMounted(async () => {\n      // Загружаем данные с API\n      const customersResponse = await fetch('/api/customers/');\n      customers.value = await customersResponse.json();\n      console.log(\"Customers:\", customers.value); // Выводим данные клиентов в консоль\n\n      const managersResponse = await fetch('/api/managers/');\n      managers.value = await managersResponse.json();\n      console.log(\"Managers:\", managers.value); // Выводим данные менеджеров в консоль\n\n      const statusesResponse = await fetch('/api/statuses/');\n      statuses.value = await statusesResponse.json();\n      console.log(\"Statuses:\", statuses.value); // Выводим данные статусов в консоль\n    });\n    function handleCustomerChange() {\n      if (form.customer_id !== 'new') newCustomer.value = '';\n    }\n    function addProduct() {\n      products.value.push({});\n    }\n    function removeLastProduct() {\n      products.value.pop();\n    }\n    function updateProduct(index, data) {\n      products.value[index] = data;\n    }\n    function removeProduct(index) {\n      products.value.splice(index, 1);\n    }\n    function handleFileUpload(event) {\n      files.value = Array.from(event.target.files);\n    }\n    async function submitForm() {\n      const payload = {\n        ...form,\n        new_customer: form.customer_id === 'new' ? newCustomer.value : undefined,\n        products: products.value,\n        files: files.value.map(f => f.name)\n      };\n      const formData = new FormData();\n      formData.append('bid_data', JSON.stringify(payload));\n      files.value.forEach(file => formData.append('files', file));\n      const response = await fetch('/api/bids/create/', {\n        method: 'POST',\n        body: formData\n      });\n      const result = await response.json();\n      if (response.ok) {\n        alert('Заявка успешно создана!');\n      } else {\n        alert('Ошибка: ' + result.message);\n      }\n    }\n    const __returned__ = {\n      form,\n      newCustomer,\n      files,\n      customers,\n      managers,\n      statuses,\n      products,\n      handleCustomerChange,\n      addProduct,\n      removeLastProduct,\n      updateProduct,\n      removeProduct,\n      handleFileUpload,\n      submitForm,\n      ref,\n      reactive,\n      onMounted,\n      ProductForm\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","reactive","onMounted","ProductForm","form","task_number","customer_id","manager","status","newCustomer","files","customers","managers","statuses","products","customersResponse","fetch","value","json","console","log","managersResponse","statusesResponse","handleCustomerChange","addProduct","push","removeLastProduct","pop","updateProduct","index","data","removeProduct","splice","handleFileUpload","event","Array","from","target","submitForm","payload","new_customer","undefined","map","f","name","formData","FormData","append","JSON","stringify","forEach","file","response","method","body","result","ok","alert","message"],"sources":["C:/task_manager_home/src/components/CreateBid.vue"],"sourcesContent":["<template>\r\n    <div>\r\n      <h2>Создание заявки</h2>\r\n      <form @submit.prevent=\"submitForm\">\r\n        <!-- Первая строка: кнопки -->\r\n        <div class=\"button-group\">\r\n          <button type=\"button\" @click=\"addProduct\">Добавить изделие</button>\r\n          <button type=\"button\" @click=\"removeLastProduct\">Удалить последнее изделие</button>\r\n        </div>\r\n  \r\n        <!-- Вторая строка: Номер заявки, заказчик, менеджер -->\r\n        <div class=\"form-row\">\r\n          <input v-model=\"form.task_number\" type=\"number\" placeholder=\"Номер заявки\" />\r\n  \r\n          <select v-model=\"form.customer_id\" @change=\"handleCustomerChange\">\r\n            <option value=\"\">Выберите заказчика</option>\r\n            <option v-for=\"customer in customers\" :key=\"customer.id\" :value=\"customer.id\">{{ customer.name }}</option>\r\n            <option value=\"new\">Добавить нового</option>\r\n          </select>\r\n  \r\n          <input v-if=\"form.customer_id === 'new'\" v-model=\"newCustomer\" placeholder=\"Новый заказчик\" />\r\n  \r\n          <select v-model=\"form.manager\">\r\n            <option value=\"\">Выберите менеджера</option>\r\n            <option v-for=\"manager in managers\" :key=\"manager\" :value=\"manager\">{{ manager }}</option>\r\n          </select>\r\n        </div>\r\n  \r\n        <!-- Изделия -->\r\n        <div v-for=\"(product, index) in products\" :key=\"index\" class=\"product-row\">\r\n          <!-- Здесь будут дочерние компоненты -->\r\n          <ProductForm\r\n            :product=\"product\"\r\n            :index=\"index\"\r\n            @update=\"updateProduct(index, $event)\"\r\n            @remove=\"removeProduct(index)\"\r\n          />\r\n        </div>\r\n  \r\n        <!-- Загрузка файлов -->\r\n        <div class=\"form-row\">\r\n          <label for=\"file-upload\">Загрузить файлы:</label>\r\n          <input id=\"file-upload\" type=\"file\" multiple @change=\"handleFileUpload\" />\r\n        </div>\r\n  \r\n        <!-- Статус -->\r\n        <div class=\"form-row\">\r\n          <select v-model=\"form.status\">\r\n            <option value=\"\">Выберите статус</option>\r\n            <option v-for=\"status in statuses\" :key=\"status\" :value=\"status\">{{ status }}</option>\r\n          </select>\r\n        </div>\r\n  \r\n        <!-- Кнопка отправки -->\r\n        <button type=\"submit\">Отправить заявку</button>\r\n      </form>\r\n    </div>\r\n  </template>\r\n  \r\n  <script setup>\r\n  import { ref, reactive, onMounted } from 'vue';\r\n  import ProductForm from './ProductForm.vue'; // Компонент для одного изделия\r\n  \r\n  const form = reactive({\r\n    task_number: '',\r\n    customer_id: '',\r\n    manager: '',\r\n    status: '',\r\n  });\r\n  \r\n  const newCustomer = ref('');\r\n  const files = ref([]);\r\n  const customers = ref([]);\r\n  const managers = ref([]);\r\n  const statuses = ref([]);\r\n  const products = ref([]);\r\n  \r\n  onMounted(async () => {\r\n  // Загружаем данные с API\r\n  const customersResponse = await fetch('/api/customers/');\r\n  customers.value = await customersResponse.json();\r\n  console.log(\"Customers:\", customers.value); // Выводим данные клиентов в консоль\r\n  \r\n  const managersResponse = await fetch('/api/managers/');\r\n  managers.value = await managersResponse.json();\r\n  console.log(\"Managers:\", managers.value); // Выводим данные менеджеров в консоль\r\n\r\n  const statusesResponse = await fetch('/api/statuses/');\r\n  statuses.value = await statusesResponse.json();\r\n  console.log(\"Statuses:\", statuses.value); // Выводим данные статусов в консоль\r\n});\r\n  \r\n  function handleCustomerChange() {\r\n    if (form.customer_id !== 'new') newCustomer.value = '';\r\n  }\r\n  \r\n  function addProduct() {\r\n    products.value.push({});\r\n  }\r\n  \r\n  function removeLastProduct() {\r\n    products.value.pop();\r\n  }\r\n  \r\n  function updateProduct(index, data) {\r\n    products.value[index] = data;\r\n  }\r\n  \r\n  function removeProduct(index) {\r\n    products.value.splice(index, 1);\r\n  }\r\n  \r\n  function handleFileUpload(event) {\r\n    files.value = Array.from(event.target.files);\r\n  }\r\n  \r\n  async function submitForm() {\r\n    const payload = {\r\n      ...form,\r\n      new_customer: form.customer_id === 'new' ? newCustomer.value : undefined,\r\n      products: products.value,\r\n      files: files.value.map(f => f.name),\r\n    };\r\n  \r\n    const formData = new FormData();\r\n    formData.append('bid_data', JSON.stringify(payload));\r\n    files.value.forEach(file => formData.append('files', file));\r\n  \r\n    const response = await fetch('/api/bids/create/', {\r\n      method: 'POST',\r\n      body: formData,\r\n    });\r\n  \r\n    const result = await response.json();\r\n    if (response.ok) {\r\n      alert('Заявка успешно создана!');\r\n    } else {\r\n      alert('Ошибка: ' + result.message);\r\n    }\r\n  }\r\n  </script>\r\n  \r\n  <style scoped>\r\n  /* Можно скопировать стили из HTML или написать на Tailwind / Bootstrap */\r\n  </style>\r\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}