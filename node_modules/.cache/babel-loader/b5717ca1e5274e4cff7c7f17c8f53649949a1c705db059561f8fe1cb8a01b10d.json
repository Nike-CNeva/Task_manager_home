{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  name: 'UserForm',\n  data() {\n    return {\n      editMode: false,\n      userId: null,\n      form: {\n        name: '',\n        firstname: '',\n        username: '',\n        password: '',\n        user_type: '',\n        workshops: [],\n        is_active: true\n      },\n      roles: [],\n      workshops: []\n    };\n  },\n  async created() {\n    const {\n      id\n    } = this.$route.params;\n    this.editMode = !!id;\n    this.userId = id;\n    const token = localStorage.getItem('auth_token');\n    if (!token) {\n      throw new Error('Токен не найден! Пожалуйста, войдите в систему.');\n    }\n    try {\n      const metaRes = await fetch(this.editMode ? `/api/admin/users/${id}/edit` : `/api/admin/users/create`);\n      const metaData = await metaRes.json();\n      this.roles = metaData.roles;\n      this.workshops = metaData.workshops;\n      if (this.editMode) {\n        const u = metaData.user_obj;\n        this.form.name = u.name;\n        this.form.firstname = u.firstname;\n        this.form.username = u.username;\n        this.form.user_type = u.user_type;\n        this.form.workshops = metaData.user_workshops;\n        this.form.is_active = u.is_active ?? true;\n      }\n    } catch (err) {\n      console.error(\"Ошибка при загрузке данных:\", err);\n    }\n  },\n  methods: {\n    async submitForm() {\n      const token = localStorage.getItem('auth_token');\n      if (!token) {\n        throw new Error('Токен не найден! Пожалуйста, войдите в систему.');\n      }\n      const payload = {\n        ...this.form\n      };\n      if (this.editMode) {\n        payload.id = this.userId;\n        // Если не меняем пароль — можно удалить поле или поставить \"заглушку\"\n        // delete payload.password;\n      }\n      const response = await fetch('/api/admin/users/save', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(payload)\n      });\n      if (response.ok) {\n        this.$router.push('/admin/users');\n      } else {\n        const error = await response.json();\n        alert(`Ошибка: ${error.detail}`);\n      }\n    }\n  }\n};","map":{"version":3,"names":["name","data","editMode","userId","form","firstname","username","password","user_type","workshops","is_active","roles","created","id","$route","params","token","localStorage","getItem","Error","metaRes","fetch","metaData","json","u","user_obj","user_workshops","err","console","error","methods","submitForm","payload","response","method","headers","body","JSON","stringify","ok","$router","push","alert","detail"],"sources":["C:\\Users\\nikec\\frontend\\src\\components\\UserForm.vue"],"sourcesContent":["<template>\r\n    <div class=\"container py-4\">\r\n      <h1>{{ editMode ? 'Редактировать' : 'Добавить' }} пользователя</h1>\r\n      <form @submit.prevent=\"submitForm\">\r\n        <div class=\"mb-3\">\r\n          <label class=\"form-label\">Имя</label>\r\n          <input v-model=\"form.name\" type=\"text\" class=\"form-control\" required>\r\n        </div>\r\n        <div v-if=\"editMode\" class=\"mb-3\">\r\n          <label class=\"form-label\">Фамилия</label>\r\n          <input v-model=\"form.firstname\" type=\"text\" class=\"form-control\" required>\r\n        </div>\r\n        <div v-if=\"!editMode\" class=\"mb-3\">\r\n          <label class=\"form-label\">Логин</label>\r\n          <input v-model=\"form.username\" type=\"text\" class=\"form-control\" required>\r\n        </div>\r\n  \r\n        <div v-if=\"!editMode\" class=\"mb-3\">\r\n          <label class=\"form-label\">Пароль</label>\r\n          <input v-model=\"form.password\" type=\"password\" class=\"form-control\" required>\r\n        </div>\r\n  \r\n        <div class=\"mb-3\">\r\n          <label class=\"form-label\">Должность</label>\r\n          <select v-model=\"form.user_type\" class=\"form-select\" required>\r\n            <option v-for=\"role in roles\" :key=\"role\" :value=\"role\">{{ role }}</option>\r\n          </select>\r\n        </div>\r\n  \r\n        <div class=\"mb-3\">\r\n          <label class=\"form-label\">Цех</label>\r\n          <select v-model=\"form.workshops\" class=\"form-select\" multiple required>\r\n            <option v-for=\"workshop in workshops\" :key=\"workshop\" :value=\"workshop\">{{ workshop }}</option>\r\n          </select>\r\n          <small class=\"text-muted\">Удерживайте Ctrl (Cmd на Mac), чтобы выбрать несколько</small>\r\n        </div>\r\n  \r\n        <div v-if=\"editMode\" class=\"form-check\">\r\n          <input class=\"form-check-input\" type=\"checkbox\" v-model=\"form.is_active\" />\r\n          <label class=\"form-check-label\">Активен</label>\r\n        </div>\r\n  \r\n        <button type=\"submit\" class=\"btn btn-primary mt-3\">Сохранить</button>\r\n        <router-link to=\"/admin/users\" class=\"btn btn-secondary mt-3 ms-2\">Отмена</router-link>\r\n      </form>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  export default {\r\n    name: 'UserForm',\r\n    data() {\r\n      return {\r\n        editMode: false,\r\n        userId: null,\r\n        form: {\r\n          name: '',\r\n          firstname: '',\r\n          username: '',\r\n          password: '',\r\n          user_type: '',\r\n          workshops: [],\r\n          is_active: true,\r\n        },\r\n        roles: [],\r\n        workshops: [],\r\n      };\r\n    },\r\n    async created() {\r\n      const { id } = this.$route.params;\r\n      this.editMode = !!id;\r\n      this.userId = id;\r\n      const token = localStorage.getItem('auth_token');\r\n        if (!token) {\r\n          throw new Error('Токен не найден! Пожалуйста, войдите в систему.');\r\n        }\r\n      try {\r\n        const metaRes = await fetch(this.editMode \r\n          ? `/api/admin/users/${id}/edit` \r\n          : `/api/admin/users/create`);\r\n        const metaData = await metaRes.json();\r\n  \r\n        this.roles = metaData.roles;\r\n        this.workshops = metaData.workshops;\r\n  \r\n        if (this.editMode) {\r\n          const u = metaData.user_obj;\r\n          this.form.name = u.name;\r\n          this.form.firstname = u.firstname;\r\n          this.form.username = u.username;\r\n          this.form.user_type = u.user_type;\r\n          this.form.workshops = metaData.user_workshops;\r\n          this.form.is_active = u.is_active ?? true;\r\n        }\r\n      } catch (err) {\r\n        console.error(\"Ошибка при загрузке данных:\", err);\r\n      }\r\n    },\r\n    methods: {\r\n      async submitForm() {\r\n        const token = localStorage.getItem('auth_token');\r\n        if (!token) {\r\n          throw new Error('Токен не найден! Пожалуйста, войдите в систему.');\r\n        }\r\n  \r\n        const payload = { ...this.form };\r\n  \r\n        if (this.editMode) {\r\n          payload.id = this.userId;\r\n          // Если не меняем пароль — можно удалить поле или поставить \"заглушку\"\r\n          // delete payload.password;\r\n        }\r\n  \r\n        const response = await fetch('/api/admin/users/save', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Authorization': `Bearer ${token}`,\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify(payload),\r\n        });\r\n  \r\n        if (response.ok) {\r\n          this.$router.push('/admin/users');\r\n        } else {\r\n          const error = await response.json();\r\n          alert(`Ошибка: ${error.detail}`);\r\n        }\r\n      }\r\n    }\r\n  };\r\n  </script>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}